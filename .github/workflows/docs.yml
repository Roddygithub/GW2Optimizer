name: Documentation

on:
  push:
    branches: [main]
    paths:
      - 'backend/**/*.py'
      - 'docs/**'
      - 'mkdocs.yml'
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: docs-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Detect documentation stack
        id: detect
        shell: bash
        env:
          MKDOCS_ROOT: ${{ hashFiles('mkdocs.yml') }}
          MKDOCS_DOCS: ${{ hashFiles('docs/mkdocs.yml') }}
          DOCUSAURUS_ROOT: ${{ hashFiles('docusaurus.config.*') }}
          DOCUSAURUS_DOCS: ${{ hashFiles('docs/**/docusaurus.config.*') }}
        run: |
          set -euo pipefail
          stack="none"
          if [[ -n "${MKDOCS_ROOT}" || -n "${MKDOCS_DOCS}" ]]; then
            stack="mkdocs"
          elif [[ -n "${DOCUSAURUS_ROOT}" || -n "${DOCUSAURUS_DOCS}" ]]; then
            stack="docusaurus"
          fi
          echo "stack=${stack}" >> "$GITHUB_OUTPUT"
          echo "⚙️ Stack détectée: ${stack}"

      - name: No documentation stack detected
        if: steps.detect.outputs.stack == 'none'
        run: echo "ℹ️  Aucun contenu de documentation détecté, skipping build."

      - name: Install MkDocs dependencies
        if: steps.detect.outputs.stack == 'mkdocs'
        shell: bash
        run: |
          set -euo pipefail
          pip install --upgrade pip
          if [ -f docs/requirements.txt ]; then
            pip install -r docs/requirements.txt
          fi
          pip install mkdocs mkdocs-material mkdocs-awesome-pages-plugin 'mkdocstrings[python]>=0.24'

      - name: Build MkDocs site
        if: steps.detect.outputs.stack == 'mkdocs'
        shell: bash
        run: |
          set -euo pipefail
          if [ -f mkdocs.yml ]; then
            mkdocs build --strict
          else
            cd docs
            mkdocs build --strict
          fi

  docs-status:
    name: Docs Status
    runs-on: ubuntu-latest
    needs: [build-docs]
    if: always()

    steps:
      - name: Check docs status
        run: |
          result="${{ needs.build-docs.result }}"
          if [ "$result" = "success" ] || [ "$result" = "skipped" ]; then
            echo "✅ Documentation OK (${result})"
          else
            echo "❌ Documentation échouée (${result})"
            exit 1
          fi
