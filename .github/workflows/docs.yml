name: Documentation

on:
  push:
    branches: [main]
    paths:
      - 'backend/**/*.py'
      - 'docs/**'
      - 'mkdocs.yml'
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Detect documentation stack
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          mkdocs_root="${{ hashFiles('mkdocs.yml') }}"
          mkdocs_docs="${{ hashFiles('docs/mkdocs.yml') }}"
          docusaurus_root="${{ hashFiles('docusaurus.config.*') }}"
          docusaurus_docs="${{ hashFiles('docs/**/docusaurus.config.*') }}"
          stack="none"
          site_dir=""
          if [[ -n "${mkdocs_root}" || -n "${mkdocs_docs}" ]]; then
            stack="mkdocs"
            site_dir="site"
          elif [[ -n "${docusaurus_root}" || -n "${docusaurus_docs}" ]]; then
            stack="docusaurus"
            site_dir="docs/build"
          fi
          echo "stack=${stack}" >> "$GITHUB_OUTPUT"
          echo "site_dir=${site_dir}" >> "$GITHUB_OUTPUT"

      - name: No documentation stack detected, skipping build
        if: steps.detect.outputs.stack == 'none'
        run: echo "ℹ️  Aucun contenu de documentation détecté, le job s'arrête ici."

      - name: Install MkDocs dependencies
        if: steps.detect.outputs.stack == 'mkdocs'
        shell: bash
        run: |
          set -euo pipefail
          pip install --upgrade pip
          pip install 'mkdocs>=1.5.3' 'mkdocs-material>=9.4.0' 'mkdocstrings[python]>=0.24' pdoc3 numpy
          pip install -r backend/requirements.txt
          pip install -r backend/requirements-dev.txt || true

      - name: Generate API docs with pdoc
        if: steps.detect.outputs.stack == 'mkdocs'
        shell: bash
        working-directory: backend
        run: |
          set -euo pipefail
          pdoc3 --html --output-dir ../docs/api app --force

      - name: Build MkDocs site
        if: steps.detect.outputs.stack == 'mkdocs'
        shell: bash
        run: |
          set -euo pipefail
          mkdocs build --strict
      - name: Upload MkDocs site
        if: steps.detect.outputs.stack == 'mkdocs'
        uses: actions/upload-artifact@v4
        with:
          name: mkdocs-site
          path: site
          retention-days: 7

      - name: Install Docusaurus dependencies
        if: steps.detect.outputs.stack == 'docusaurus'
        shell: bash
        run: |
          set -euo pipefail
          npm install --global npm@latest
        working-directory: docs

      - name: Set up Node.js (docs)
        if: steps.detect.outputs.stack == 'docusaurus'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: docs/package-lock.json

      - name: Install docs dependencies
        if: steps.detect.outputs.stack == 'docusaurus'
        working-directory: docs
        run: npm ci

      - name: Build Docusaurus site
        if: steps.detect.outputs.stack == 'docusaurus'
        shell: bash
        working-directory: docs
        run: |
          set -euo pipefail
          npm run build
      - name: Upload Docusaurus site
        if: steps.detect.outputs.stack == 'docusaurus'
        uses: actions/upload-artifact@v4
        with:
          name: docusaurus-site
          path: docs/build
          retention-days: 7

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.detect.outputs.site_dir != ''
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ steps.detect.outputs.site_dir }}
          cname: gw2optimizer.dev

  docs-status:
    name: Docs Status
    runs-on: ubuntu-latest
    needs: [build-docs]
    if: always()

    steps:
      - name: Check docs status
        run: |
          if [ "${{ needs.build-docs.result }}" == "success" ]; then
            echo "✅ Documentation built successfully!"
            exit 0
          else
            echo "❌ Documentation build failed"
            exit 1
          fi
