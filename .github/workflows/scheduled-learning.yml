name: Scheduled Learning Pipeline

on:
  schedule:
    # Run every Sunday at 00:00 UTC
    - cron: '0 0 * * 0'
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_VERSION: '3.11'

jobs:
  run-learning-pipeline:
    name: Run Learning Pipeline
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run learning data collection
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          LEARNING_ENABLED: "true"
          LEARNING_DATA_DIR: ./data/learning
        run: |
          cd backend
          python -m app.learning.scripts.collect_data
      
      - name: Process learning data
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          LEARNING_DATA_DIR: ./data/learning
        run: |
          cd backend
          python -m app.learning.scripts.process_data
      
      - name: Generate learning statistics
        env:
          LEARNING_DATA_DIR: ./data/learning
        run: |
          cd backend
          python -m app.learning.scripts.generate_stats
      
      - name: Archive learning data
        uses: actions/upload-artifact@v4
        with:
          name: learning-data-${{ github.run_number }}
          path: backend/data/learning/
          retention-days: 90
      
      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Learning Pipeline Failed',
              body: `The scheduled learning pipeline failed on ${new Date().toISOString()}\n\nRun: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              labels: ['bug', 'learning', 'automated']
            })
