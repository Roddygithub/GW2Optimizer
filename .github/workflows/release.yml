name: Release Automation

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.5.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üìå Version: $VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          echo "## üéâ What's New" > release_notes.md
          echo "" >> release_notes.md
          
          # Extract changes from CHANGELOG.md for this version
          if [ -f "CHANGELOG.md" ]; then
            sed -n "/## \[${{ steps.version.outputs.version }}\]/,/## \[/p" CHANGELOG.md | head -n -1 >> release_notes.md
          fi
          
          # Add commit history
          echo "" >> release_notes.md
          echo "## üìù Commits" >> release_notes.md
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md
          
          cat release_notes.md

      - name: Build distribution
        run: |
          cd backend
          pip install build
          python -m build
          ls -lh dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: GW2Optimizer ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          files: |
            backend/dist/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository }}:latest

  release-status:
    name: Release Status
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always()

    steps:
      - name: Check release status
        run: |
          if [ "${{ needs.create-release.result }}" == "success" ]; then
            echo "‚úÖ Release created successfully!"
            exit 0
          else
            echo "‚ùå Release creation failed"
            exit 1
          fi
