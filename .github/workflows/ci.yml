name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  workflows-lint:
    name: Lint GitHub Workflows
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: rhysd/actionlint@v1
        with:
          args: -color

  lint-backend:
    name: Lint Backend
    runs-on: ubuntu-latest
    needs: workflows-lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run Black
        run: |
          cd backend
          black --check . --exclude="/(\.git|\.pytest_cache|\.ruff_cache|__pycache__|htmlcov|\.venv|venv|build|dist|data)/"
      
      - name: Run Flake8
        run: |
          cd backend
          flake8 app/ tests/ --max-line-length=120 --exclude=__pycache__,migrations
      
      # Temporarily disabled for v1.4.0 - will be fixed in v1.4.1
      # - name: Run isort
      #   run: |
      #     cd backend
      #     isort --check-only app/ tests/
      
      - name: Run MyPy
        run: |
          cd backend
          mypy app/ --ignore-missing-imports
        continue-on-error: true

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: [workflows-lint, lint-backend]
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: gw2optimizer_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run Unit Tests
        env:
          DATABASE_URL: postgresql+asyncpg://test:test@localhost:5432/gw2optimizer_test
          TEST_DATABASE_URL: postgresql+asyncpg://test:test@localhost:5432/gw2optimizer_test
          REDIS_URL: redis://localhost:6379/0
          REDIS_ENABLED: "true"
          SECRET_KEY: test-secret-key-for-ci-only-not-for-production
          ALGORITHM: HS256
          ACCESS_TOKEN_EXPIRE_MINUTES: 30
          TESTING: "true"
        run: |
          cd backend
          pytest tests/test_services/ -v --cov=app/services --cov-report=xml:coverage-services.xml --cov-report=term
      
      - name: Run API Tests
        env:
          DATABASE_URL: postgresql+asyncpg://test:test@localhost:5432/gw2optimizer_test
          TEST_DATABASE_URL: postgresql+asyncpg://test:test@localhost:5432/gw2optimizer_test
          REDIS_URL: redis://localhost:6379/0
          REDIS_ENABLED: "true"
          SECRET_KEY: test-secret-key-for-ci-only-not-for-production
          ALGORITHM: HS256
          ACCESS_TOKEN_EXPIRE_MINUTES: 30
          TESTING: "true"
        run: |
          cd backend
          pytest tests/test_api/ -v --cov=app/api --cov-report=xml:coverage-api.xml --cov-report=term
      
      - name: Initialize Test Database
        env:
          TEST_DATABASE_URL: postgresql+asyncpg://test:test@localhost:5432/gw2optimizer_test
        run: |
          cd backend
          python scripts/init_test_db.py
      
      - name: Run Integration Tests
        env:
          DATABASE_URL: postgresql+asyncpg://test:test@localhost:5432/gw2optimizer_test
          TEST_DATABASE_URL: postgresql+asyncpg://test:test@localhost:5432/gw2optimizer_test
          REDIS_URL: redis://localhost:6379/0
          REDIS_ENABLED: "true"
          SECRET_KEY: test-secret-key-for-ci-only-not-for-production
          ALGORITHM: HS256
          ACCESS_TOKEN_EXPIRE_MINUTES: 30
          TESTING: "true"
        run: |
          cd backend
          pytest tests/test_integration/ -v --cov=app --cov-report=xml:coverage-integration.xml --cov-report=term
      
      - name: Run Critical Tests with Coverage
        env:
          DATABASE_URL: postgresql+asyncpg://test:test@localhost:5432/gw2optimizer_test
          TEST_DATABASE_URL: postgresql+asyncpg://test:test@localhost:5432/gw2optimizer_test
          REDIS_URL: redis://localhost:6379/0
          REDIS_ENABLED: "true"
          SECRET_KEY: test-secret-key-for-ci-only-not-for-production
          ALGORITHM: HS256
          ACCESS_TOKEN_EXPIRE_MINUTES: 30
          TESTING: "true"
        run: |
          cd backend
          pytest -m 'not legacy' --cov=app --cov-report=xml --cov-report=term --cov-report=html --cov-fail-under=35
      
      - name: Run All Tests (including legacy) - Optional
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        continue-on-error: true
        env:
          DATABASE_URL: postgresql+asyncpg://test:test@localhost:5432/gw2optimizer_test
          TEST_DATABASE_URL: postgresql+asyncpg://test:test@localhost:5432/gw2optimizer_test
          REDIS_URL: redis://localhost:6379/0
          REDIS_ENABLED: "true"
          SECRET_KEY: test-secret-key-for-ci-only-not-for-production
          ALGORITHM: HS256
          ACCESS_TOKEN_EXPIRE_MINUTES: 30
          TESTING: "true"
        run: |
          cd backend
          pytest --cov=app --cov-report=xml:coverage-all.xml --cov-report=term
      
      - name: Upload coverage to Codecov
        continue-on-error: true
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Archive coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: backend/htmlcov/
          retention-days: 30

  e2e:
    name: E2E (Playwright, npm)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [workflows-lint]
    continue-on-error: true  # Temporary for v4.2.0 release; tighten in follow-up PR
    concurrency:
      group: e2e-${{ github.ref }}
      cancel-in-progress: true
    permissions:
      contents: read
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install deps
        run: npm ci
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests (webServer via config)
        env:
          E2E_BASE_URL: http://localhost:5173
          # E2E_USER: ${{ secrets.E2E_USER }}
          # E2E_PASS: ${{ secrets.E2E_PASS }}
        run: npm run test:e2e
      - name: Upload Playwright HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/playwright-report
          retention-days: 7
      - name: Upload Playwright JSON report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-json
          path: frontend/playwright-report/report.json
          retention-days: 7

  frontend-unit:
    name: Frontend Unit (Vitest + Coverage)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [workflows-lint]
    permissions:
      contents: read
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install deps
        run: npm ci
      - name: Run unit tests with coverage (thresholds enforced)
        run: npm test -- --coverage
      - name: Upload coverage summary (HTML/LCOV/JSON)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage
          retention-days: 7

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [lint-backend, test-backend]
    if: always()
    steps:
      - name: Check build status
        run: |
          if [ "${{ needs.lint-backend.result }}" == "success" ] && [ "${{ needs.test-backend.result }}" == "success" ]; then
            echo "✅ All checks passed!"
            exit 0
          else
            echo "❌ Some checks failed"
            echo "Lint: ${{ needs.lint-backend.result }}"
            echo "Test: ${{ needs.test-backend.result }}"
            exit 1
          fi

  auto-merge:
    name: Auto Merge PR
    runs-on: ubuntu-latest
    needs: [lint-backend, test-backend]
    if: github.event_name == 'pull_request' && github.actor == 'dependabot[bot]'
    steps:
      - name: Auto merge
        uses: pascalgn/automerge-action@v0.16.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MERGE_LABELS: ""
          MERGE_METHOD: squash
