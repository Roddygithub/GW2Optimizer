#!/usr/bin/env python3
"""
Nettoyage Intelligent du Projet GW2Optimizer
Supprime les fichiers obsol√®tes et r√©organise la documentation
"""

import os
import shutil
from pathlib import Path
from datetime import datetime
import json


class Colors:
    RED = "\033[0;31m"
    GREEN = "\033[0;32m"
    YELLOW = "\033[1;33m"
    BLUE = "\033[0;34m"
    MAGENTA = "\033[0;35m"
    NC = "\033[0m"


def log(message, color=Colors.NC):
    """Log with color"""
    print(f"{color}{message}{Colors.NC}")


class ProjectCleaner:
    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.stats = {
            "files_removed": 0,
            "dirs_removed": 0,
            "bytes_freed": 0,
            "files_moved": 0,
            "files_kept": 0
        }
        self.dry_run = False
    
    def clean_pycache(self):
        """Remove all __pycache__ directories and .pyc files"""
        log("\nüßπ Cleaning Python cache files...", Colors.BLUE)
        
        pycache_dirs = list(self.project_root.rglob("__pycache__"))
        pyc_files = list(self.project_root.rglob("*.pyc"))
        
        # Remove .pyc files first (before removing directories)
        for pyc_file in pyc_files:
            try:
                if pyc_file.exists():
                    size = pyc_file.stat().st_size
                    if not self.dry_run:
                        pyc_file.unlink()
                    self.stats["files_removed"] += 1
                    self.stats["bytes_freed"] += size
            except (FileNotFoundError, OSError):
                # File already removed or inaccessible
                pass
        
        # Then remove __pycache__ directories
        for pycache_dir in pycache_dirs:
            try:
                if pycache_dir.exists():
                    if not self.dry_run:
                        shutil.rmtree(pycache_dir, ignore_errors=True)
                    self.stats["dirs_removed"] += 1
                    log(f"  ‚úì Removed: {pycache_dir.relative_to(self.project_root)}", Colors.GREEN)
            except (FileNotFoundError, OSError):
                # Directory already removed or inaccessible
                pass
        
        log(f"  üìä Removed {self.stats['dirs_removed']} __pycache__ dirs and {self.stats['files_removed']} .pyc files", Colors.YELLOW)
    
    def clean_logs(self):
        """Clean empty log files"""
        log("\nüßπ Cleaning log files...", Colors.BLUE)
        
        log_files = [
            self.project_root / "reports/ci/monitor_live.log",
            self.project_root / "reports/ci/monitor_output.log"
        ]
        
        for log_file in log_files:
            if log_file.exists():
                size = log_file.stat().st_size
                if size == 0:
                    if not self.dry_run:
                        log_file.unlink()
                    self.stats["files_removed"] += 1
                    log(f"  ‚úì Removed empty: {log_file.relative_to(self.project_root)}", Colors.GREEN)
                else:
                    log(f"  ‚äô Kept (not empty): {log_file.relative_to(self.project_root)} ({size} bytes)", Colors.YELLOW)
                    self.stats["files_kept"] += 1
    
    def organize_reports(self):
        """Organize reports into archive"""
        log("\nüìÅ Organizing reports...", Colors.BLUE)
        
        reports_dir = self.project_root / "reports"
        archive_dir = reports_dir / "archive"
        
        # Create archive directory
        if not self.dry_run:
            archive_dir.mkdir(exist_ok=True)
        
        # Files to archive (old mission reports)
        files_to_archive = [
            "AUDIT_COMPLET_2025-10-22.md",
            "MISSION_v2.8.0_FINAL_REPORT.md",
            "MISSION_v2.8.0_PARTIAL_SUCCESS.md",
            "MISSION_v2.8.0_PROGRESS.md",
            "MISSION_v2.8.0_STATUS.md",
            "MISSION_v2.9.0_ACTION_PLAN.md",
            "MISSION_v2.9.0_PROGRESS.md",
        ]
        
        for filename in files_to_archive:
            src = reports_dir / filename
            if src.exists():
                dst = archive_dir / filename
                if not self.dry_run:
                    shutil.move(str(src), str(dst))
                self.stats["files_moved"] += 1
                log(f"  ‚úì Archived: {filename}", Colors.GREEN)
        
        log(f"  üìä Archived {len(files_to_archive)} old reports", Colors.YELLOW)
    
    def organize_ci_reports(self):
        """Organize CI reports into archive"""
        log("\nüìÅ Organizing CI reports...", Colors.BLUE)
        
        ci_dir = self.project_root / "reports/ci"
        archive_dir = ci_dir / "archive"
        
        # Create archive directory
        if not self.dry_run:
            archive_dir.mkdir(exist_ok=True)
        
        # Files to archive (old CI reports)
        files_to_archive = [
            "ALL_TESTS_FIXED.md",
            "AUTO_MONITOR_PROGRESS.md",
            "CI_AUTO_FIX_PROGRESS.md",
            "CI_DEBUG_ANALYSIS.md",
            "CI_DEBUG_LOGS.md",
            "CI_FIX_BCRYPT.md",
            "CI_GLOBAL_VALIDATION.md",
            "CI_PROGRESS_FINAL.md",
            "FINAL_REPORT_v2.2.0.md",
            "FINAL_REPORT_v2.3.0_COMPLETE.md",
            "FINAL_VALIDATION.md",
            "MISSION_COMPLETE.md",
            "MISSION_v2.4.0_REPORT.md",
            "MISSION_v2.4.1_REPORT.md",
            "MISSION_v2.5.0_FINAL_REPORT.md",
            "MISSION_v2.5.0_PROGRESS.md",
            "MISSION_v2.6.0_FINAL_REPORT.md",
            "PHASE1_COMPLETE.md",
            "SESSION_2025-10-22_E2E_INTEGRATION.md",
            "SESSION_FINAL_REPORT.md",
            "SESSION_FINAL_REPORT_v1.9.0.md",
            "SESSION_FINAL_REPORT_v2.0.0.md",
            "SESSION_FINAL_REPORT_v2.4.2.md",
        ]
        
        for filename in files_to_archive:
            src = ci_dir / filename
            if src.exists():
                dst = archive_dir / filename
                if not self.dry_run:
                    shutil.move(str(src), str(dst))
                self.stats["files_moved"] += 1
                log(f"  ‚úì Archived: {filename}", Colors.GREEN)
        
        # Keep only the latest mission report
        log(f"  ‚äô Kept: MISSION_v2.7.0_FINAL_REPORT.md (latest)", Colors.YELLOW)
        self.stats["files_kept"] += 1
        
        log(f"  üìä Archived {len(files_to_archive)} old CI reports", Colors.YELLOW)
    
    def create_index(self):
        """Create index files for documentation"""
        log("\nüìù Creating documentation index...", Colors.BLUE)
        
        # Main reports index
        reports_index = self.project_root / "reports/README.md"
        
        index_content = """# üìä REPORTS INDEX - GW2Optimizer v3.0.0

**Last Updated**: {timestamp}

---

## üéØ CURRENT REPORTS (v3.0.0)

### Mission Reports
- **[MISSION_v3.0_FINAL_REPORT.md](./MISSION_v3.0_FINAL_REPORT.md)** - Final report v3.0.0 ‚≠ê
- **[MISSION_v2.9.0_FINAL_REPORT.md](./MISSION_v2.9.0_FINAL_REPORT.md)** - Final report v2.9.0
- **[MISSION_v2.9.0_PHASE3_COMPLETE.md](./MISSION_v2.9.0_PHASE3_COMPLETE.md)** - Phase 3 monitoring

### Implementation Reports
- **[IMPLEMENTATION_COMPLETE.md](./IMPLEMENTATION_COMPLETE.md)** - Complete implementation details
- **[frontend_coverage.md](./frontend_coverage.md)** - Frontend test coverage

### Monitoring Reports
- **[monitoring_validation.md](./monitoring_validation.md)** - Monitoring validation
- **[grafana_dashboard_report.md](./grafana_dashboard_report.md)** - Grafana dashboard

---

## üìÅ ARCHIVED REPORTS

Old mission reports and progress files are archived in:
- **[archive/](./archive/)** - Old mission reports (v2.8.0 and earlier)
- **[ci/archive/](./ci/archive/)** - Old CI reports (v2.0.0 - v2.6.0)

### Latest CI Report
- **[ci/MISSION_v2.7.0_FINAL_REPORT.md](./ci/MISSION_v2.7.0_FINAL_REPORT.md)** - Latest CI mission

---

## üìö DOCUMENTATION

For setup and deployment guides, see:
- **[../docs/](../docs/)** - Complete documentation
- **[../docs/DEPLOYMENT_GUIDE.md](../docs/DEPLOYMENT_GUIDE.md)** - Deployment guide
- **[../docs/QUICK_TEST_GUIDE.md](../docs/QUICK_TEST_GUIDE.md)** - Quick test guide
- **[../docs/SENTRY_SETUP.md](../docs/SENTRY_SETUP.md)** - Sentry setup

---

## üéØ QUICK LINKS

- **Latest Release**: v3.0.0
- **Production Status**: ‚úÖ Ready
- **Tests**: 151 passing (96% backend, ~60% frontend)
- **Documentation**: 9 guides + 6 reports

---

**Generated**: {timestamp}
""".format(timestamp=datetime.utcnow().isoformat())
        
        if not self.dry_run:
            with open(reports_index, "w") as f:
                f.write(index_content)
        
        log(f"  ‚úì Created: reports/README.md", Colors.GREEN)
        
        # Docs index
        docs_index = self.project_root / "docs/README.md"
        
        docs_content = """# üìö DOCUMENTATION INDEX - GW2Optimizer v3.0.0

**Last Updated**: {timestamp}

---

## üöÄ GETTING STARTED

1. **[DEPLOYMENT_GUIDE.md](./DEPLOYMENT_GUIDE.md)** - Complete deployment guide ‚≠ê
2. **[QUICK_TEST_GUIDE.md](./QUICK_TEST_GUIDE.md)** - Quick testing (15 min)
3. **[SENTRY_SETUP.md](./SENTRY_SETUP.md)** - Error tracking setup

---

## üìñ TECHNICAL DOCUMENTATION

### Architecture
- **[ARCHITECTURE.md](./ARCHITECTURE.md)** - System architecture
- **[API.md](./API.md)** - API documentation
- **[backend.md](./backend.md)** - Backend documentation

### Testing & CI/CD
- **[TESTING.md](./TESTING.md)** - Testing guide
- **[CI_CD_SETUP.md](./CI_CD_SETUP.md)** - CI/CD configuration
- **[E2E_REAL_CONDITIONS_SETUP.md](./E2E_REAL_CONDITIONS_SETUP.md)** - E2E testing

### Analysis
- **[META_ANALYSIS.md](./META_ANALYSIS.md)** - Meta analysis
- **[CLAUDE_AUTO_ANALYSIS.md](./CLAUDE_AUTO_ANALYSIS.md)** - Auto analysis

---

## üéØ BY USE CASE

### Deploying to Production
1. Read [DEPLOYMENT_GUIDE.md](./DEPLOYMENT_GUIDE.md)
2. Configure environment variables
3. Run deployment commands
4. Verify with [QUICK_TEST_GUIDE.md](./QUICK_TEST_GUIDE.md)

### Setting Up Monitoring
1. Read [SENTRY_SETUP.md](./SENTRY_SETUP.md)
2. Configure Prometheus + Grafana
3. Import Grafana dashboard
4. Verify metrics

### Running Tests
1. Read [TESTING.md](./TESTING.md)
2. Run backend tests: `pytest`
3. Run frontend tests: `npm test`
4. Check coverage reports

### Understanding Architecture
1. Read [ARCHITECTURE.md](./ARCHITECTURE.md)
2. Review [backend.md](./backend.md)
3. Check [API.md](./API.md)

---

## üìä REPORTS

Mission reports and implementation details are in:
- **[../reports/](../reports/)** - All reports
- **[../reports/README.md](../reports/README.md)** - Reports index

---

## üîó EXTERNAL LINKS

- **GitHub**: https://github.com/Roddygithub/GW2Optimizer
- **Sentry**: https://sentry.io
- **GW2 API**: https://wiki.guildwars2.com/wiki/API:Main
- **Mistral AI**: https://mistral.ai

---

**Generated**: {timestamp}
""".format(timestamp=datetime.utcnow().isoformat())
        
        if not self.dry_run:
            with open(docs_index, "w") as f:
                f.write(docs_content)
        
        log(f"  ‚úì Created: docs/README.md", Colors.GREEN)
    
    def generate_report(self):
        """Generate cleanup report"""
        log("\nüìä Generating cleanup report...", Colors.BLUE)
        
        report = f"""# üßπ PROJECT CLEANUP REPORT

**Date**: {datetime.utcnow().isoformat()}
**Version**: v3.0.0

---

## üìä CLEANUP STATISTICS

### Files
- **Removed**: {self.stats['files_removed']} files
- **Moved**: {self.stats['files_moved']} files
- **Kept**: {self.stats['files_kept']} files

### Directories
- **Removed**: {self.stats['dirs_removed']} directories

### Space
- **Freed**: {self.stats['bytes_freed']:,} bytes ({self.stats['bytes_freed'] / 1024:.2f} KB)

---

## üßπ ACTIONS PERFORMED

### 1. Python Cache Cleanup
- Removed all `__pycache__` directories
- Removed all `.pyc` files
- **Result**: Cleaner repository, faster git operations

### 2. Log Files Cleanup
- Removed empty log files
- Kept non-empty logs for debugging
- **Result**: Reduced clutter

### 3. Reports Organization
- Archived old mission reports (v2.8.0 and earlier)
- Archived old CI reports (v2.0.0 - v2.6.0)
- Created `archive/` directories
- **Result**: Better organization, easier navigation

### 4. Documentation Index
- Created `reports/README.md` - Reports index
- Created `docs/README.md` - Documentation index
- **Result**: Improved discoverability

---

## üìÅ NEW STRUCTURE

```
GW2Optimizer/
‚îú‚îÄ‚îÄ reports/
‚îÇ   ‚îú‚îÄ‚îÄ README.md (NEW - Index)
‚îÇ   ‚îú‚îÄ‚îÄ MISSION_v3.0_FINAL_REPORT.md (Current)
‚îÇ   ‚îú‚îÄ‚îÄ MISSION_v2.9.0_FINAL_REPORT.md
‚îÇ   ‚îú‚îÄ‚îÄ IMPLEMENTATION_COMPLETE.md
‚îÇ   ‚îú‚îÄ‚îÄ frontend_coverage.md
‚îÇ   ‚îú‚îÄ‚îÄ monitoring_validation.md
‚îÇ   ‚îú‚îÄ‚îÄ grafana_dashboard_report.md
‚îÇ   ‚îú‚îÄ‚îÄ archive/ (NEW - Old reports)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MISSION_v2.8.0_*.md
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îÇ   ‚îî‚îÄ‚îÄ ci/
‚îÇ       ‚îú‚îÄ‚îÄ MISSION_v2.7.0_FINAL_REPORT.md (Latest)
‚îÇ       ‚îî‚îÄ‚îÄ archive/ (NEW - Old CI reports)
‚îÇ           ‚îú‚îÄ‚îÄ MISSION_v2.6.0_*.md
‚îÇ           ‚îî‚îÄ‚îÄ ...
‚îÇ
‚îú‚îÄ‚îÄ docs/
‚îÇ   ‚îú‚îÄ‚îÄ README.md (NEW - Index)
‚îÇ   ‚îú‚îÄ‚îÄ DEPLOYMENT_GUIDE.md
‚îÇ   ‚îú‚îÄ‚îÄ QUICK_TEST_GUIDE.md
‚îÇ   ‚îú‚îÄ‚îÄ SENTRY_SETUP.md
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îÇ
‚îî‚îÄ‚îÄ backend/
    ‚îú‚îÄ‚îÄ app/ (No __pycache__)
    ‚îî‚îÄ‚îÄ tests/ (No __pycache__)
```

---

## ‚úÖ BENEFITS

### 1. Cleaner Repository
- No Python cache files
- No empty logs
- Better organized reports

### 2. Easier Navigation
- Clear index files
- Archived old reports
- Logical structure

### 3. Better Git Performance
- Fewer files to track
- Smaller repository size
- Faster operations

### 4. Improved Discoverability
- README files in key directories
- Clear documentation structure
- Easy to find current reports

---

## üéØ RECOMMENDATIONS

### Immediate
1. ‚úÖ Review archived reports if needed
2. ‚úÖ Use new README files for navigation
3. ‚úÖ Add `__pycache__/` to `.gitignore` (already done)

### Ongoing
1. Run cleanup script periodically
2. Archive old reports after each major version
3. Keep documentation up to date

---

## üìù NOTES

- All archived files are preserved (not deleted)
- Current reports (v3.0.0) are easily accessible
- Documentation structure is now clearer
- No functionality was affected

---

**Cleanup Status**: ‚úÖ COMPLETE
**Repository Status**: ‚úÖ CLEAN
**Documentation Status**: ‚úÖ ORGANIZED

---

**Generated**: {datetime.utcnow().isoformat()}
"""
        
        report_path = self.project_root / "reports/CLEANUP_REPORT.md"
        if not self.dry_run:
            with open(report_path, "w") as f:
                f.write(report)
        
        log(f"  ‚úì Created: reports/CLEANUP_REPORT.md", Colors.GREEN)
        
        return report
    
    def run(self, dry_run=False):
        """Run all cleanup tasks"""
        self.dry_run = dry_run
        
        log("=" * 80, Colors.BLUE)
        log(" üßπ PROJECT CLEANUP - GW2Optimizer v3.0.0", Colors.BLUE)
        log("=" * 80, Colors.BLUE)
        
        if dry_run:
            log("\n‚ö†Ô∏è DRY RUN MODE - No files will be modified", Colors.YELLOW)
        
        self.clean_pycache()
        self.clean_logs()
        self.organize_reports()
        self.organize_ci_reports()
        self.create_index()
        report = self.generate_report()
        
        log("\n" + "=" * 80, Colors.BLUE)
        log(" ‚úÖ CLEANUP COMPLETE", Colors.GREEN)
        log("=" * 80, Colors.BLUE)
        
        log(f"\nüìä Summary:", Colors.YELLOW)
        log(f"  - Files removed: {self.stats['files_removed']}", Colors.NC)
        log(f"  - Files moved: {self.stats['files_moved']}", Colors.NC)
        log(f"  - Files kept: {self.stats['files_kept']}", Colors.NC)
        log(f"  - Directories removed: {self.stats['dirs_removed']}", Colors.NC)
        log(f"  - Space freed: {self.stats['bytes_freed']:,} bytes ({self.stats['bytes_freed'] / 1024:.2f} KB)", Colors.NC)
        
        log(f"\nüìù Report saved: reports/CLEANUP_REPORT.md", Colors.GREEN)
        log(f"üìö Documentation index: docs/README.md", Colors.GREEN)
        log(f"üìä Reports index: reports/README.md", Colors.GREEN)


if __name__ == "__main__":
    import sys
    
    project_root = Path(__file__).parent.parent
    cleaner = ProjectCleaner(project_root)
    
    # Check for --dry-run flag
    dry_run = "--dry-run" in sys.argv
    
    try:
        cleaner.run(dry_run=dry_run)
    except KeyboardInterrupt:
        log("\n\n‚ö†Ô∏è Interrupted by user", Colors.YELLOW)
        sys.exit(130)
    except Exception as e:
        log(f"\n\n‚ùå Error: {e}", Colors.RED)
        import traceback
        traceback.print_exc()
        sys.exit(1)
